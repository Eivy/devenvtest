// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
	id,
	name,
	location,
	manager_id
)
SELECT
	CASE WHEN MAX(id) IS NULL THEN 0 ELSE MAX(id) + 1 END as id,
	$1 as name,
	$2 as location,
	$3 as manager_id
FROM items
RETURNING id, name, location, counts, manager_id
`

type CreateItemParams struct {
	Name      string
	Location  sql.NullString
	ManagerID int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Location, arg.ManagerID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Counts,
		&i.ManagerID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id,
	name
)
SELECT
	CASE WHEN MAX(id) IS NULL THEN 0 ELSE MAX(id) + 1 END as id,
	$1 as name
FROM users
RETURNING id, name
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT items.id, items.name, location, counts, manager_id, users.id, users.name FROM items
LEFT JOIN users
ON items.manager_id = users.id
WHERE items.id = $1 LIMIT 1
`

type GetItemRow struct {
	ID        int32
	Name      string
	Location  sql.NullString
	Counts    int32
	ManagerID int32
	ID_2      int32
	Name_2    string
}

func (q *Queries) GetItem(ctx context.Context, id int32) (GetItemRow, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i GetItemRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Counts,
		&i.ManagerID,
		&i.ID_2,
		&i.Name_2,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users where id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT items.id, items.name, location, counts, manager_id, users.id, users.name FROM items
LEFT JOIN users
ON items.manager_id = users.id
ORDER by items.name
`

type ListItemsRow struct {
	ID        int32
	Name      string
	Location  sql.NullString
	Counts    int32
	ManagerID int32
	ID_2      int32
	Name_2    string
}

func (q *Queries) ListItems(ctx context.Context) ([]ListItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsRow
	for rows.Next() {
		var i ListItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Counts,
			&i.ManagerID,
			&i.ID_2,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name FROM users order by name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
